// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package delivery_test

import (
	"github.com/odarix/odarix-core-go/common"
	"sync"
)

// Ensure, that SegmentMock does implement common.Segment.
// If this is not the case, regenerate this file with moq.
var _ common.Segment = &SegmentMock{}

// SegmentMock is a mock implementation of common.Segment.
//
//	func TestSomethingThatUsesSegment(t *testing.T) {
//
//		// make and configure a mocked common.Segment
//		mockedSegment := &SegmentMock{
//			BytesFunc: func() []byte {
//				panic("mock out the Bytes method")
//			},
//			DestroyFunc: func()  {
//				panic("mock out the Destroy method")
//			},
//			EarliestFunc: func() int64 {
//				panic("mock out the Earliest method")
//			},
//			LatestFunc: func() int64 {
//				panic("mock out the Latest method")
//			},
//			SamplesFunc: func() uint32 {
//				panic("mock out the Samples method")
//			},
//			SeriesFunc: func() uint32 {
//				panic("mock out the Series method")
//			},
//		}
//
//		// use mockedSegment in code that requires common.Segment
//		// and then make assertions.
//
//	}
type SegmentMock struct {
	// BytesFunc mocks the Bytes method.
	BytesFunc func() []byte

	// DestroyFunc mocks the Destroy method.
	DestroyFunc func()

	// EarliestFunc mocks the Earliest method.
	EarliestFunc func() int64

	// LatestFunc mocks the Latest method.
	LatestFunc func() int64

	// SamplesFunc mocks the Samples method.
	SamplesFunc func() uint32

	// SeriesFunc mocks the Series method.
	SeriesFunc func() uint32

	// calls tracks calls to the methods.
	calls struct {
		// Bytes holds details about calls to the Bytes method.
		Bytes []struct {
		}
		// Destroy holds details about calls to the Destroy method.
		Destroy []struct {
		}
		// Earliest holds details about calls to the Earliest method.
		Earliest []struct {
		}
		// Latest holds details about calls to the Latest method.
		Latest []struct {
		}
		// Samples holds details about calls to the Samples method.
		Samples []struct {
		}
		// Series holds details about calls to the Series method.
		Series []struct {
		}
	}
	lockBytes    sync.RWMutex
	lockDestroy  sync.RWMutex
	lockEarliest sync.RWMutex
	lockLatest   sync.RWMutex
	lockSamples  sync.RWMutex
	lockSeries   sync.RWMutex
}

// Bytes calls BytesFunc.
func (mock *SegmentMock) Bytes() []byte {
	if mock.BytesFunc == nil {
		panic("SegmentMock.BytesFunc: method is nil but Segment.Bytes was just called")
	}
	callInfo := struct {
	}{}
	mock.lockBytes.Lock()
	mock.calls.Bytes = append(mock.calls.Bytes, callInfo)
	mock.lockBytes.Unlock()
	return mock.BytesFunc()
}

// BytesCalls gets all the calls that were made to Bytes.
// Check the length with:
//
//	len(mockedSegment.BytesCalls())
func (mock *SegmentMock) BytesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockBytes.RLock()
	calls = mock.calls.Bytes
	mock.lockBytes.RUnlock()
	return calls
}

// Destroy calls DestroyFunc.
func (mock *SegmentMock) Destroy() {
	if mock.DestroyFunc == nil {
		panic("SegmentMock.DestroyFunc: method is nil but Segment.Destroy was just called")
	}
	callInfo := struct {
	}{}
	mock.lockDestroy.Lock()
	mock.calls.Destroy = append(mock.calls.Destroy, callInfo)
	mock.lockDestroy.Unlock()
	mock.DestroyFunc()
}

// DestroyCalls gets all the calls that were made to Destroy.
// Check the length with:
//
//	len(mockedSegment.DestroyCalls())
func (mock *SegmentMock) DestroyCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockDestroy.RLock()
	calls = mock.calls.Destroy
	mock.lockDestroy.RUnlock()
	return calls
}

// Earliest calls EarliestFunc.
func (mock *SegmentMock) Earliest() int64 {
	if mock.EarliestFunc == nil {
		panic("SegmentMock.EarliestFunc: method is nil but Segment.Earliest was just called")
	}
	callInfo := struct {
	}{}
	mock.lockEarliest.Lock()
	mock.calls.Earliest = append(mock.calls.Earliest, callInfo)
	mock.lockEarliest.Unlock()
	return mock.EarliestFunc()
}

// EarliestCalls gets all the calls that were made to Earliest.
// Check the length with:
//
//	len(mockedSegment.EarliestCalls())
func (mock *SegmentMock) EarliestCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockEarliest.RLock()
	calls = mock.calls.Earliest
	mock.lockEarliest.RUnlock()
	return calls
}

// Latest calls LatestFunc.
func (mock *SegmentMock) Latest() int64 {
	if mock.LatestFunc == nil {
		panic("SegmentMock.LatestFunc: method is nil but Segment.Latest was just called")
	}
	callInfo := struct {
	}{}
	mock.lockLatest.Lock()
	mock.calls.Latest = append(mock.calls.Latest, callInfo)
	mock.lockLatest.Unlock()
	return mock.LatestFunc()
}

// LatestCalls gets all the calls that were made to Latest.
// Check the length with:
//
//	len(mockedSegment.LatestCalls())
func (mock *SegmentMock) LatestCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockLatest.RLock()
	calls = mock.calls.Latest
	mock.lockLatest.RUnlock()
	return calls
}

// Samples calls SamplesFunc.
func (mock *SegmentMock) Samples() uint32 {
	if mock.SamplesFunc == nil {
		panic("SegmentMock.SamplesFunc: method is nil but Segment.Samples was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSamples.Lock()
	mock.calls.Samples = append(mock.calls.Samples, callInfo)
	mock.lockSamples.Unlock()
	return mock.SamplesFunc()
}

// SamplesCalls gets all the calls that were made to Samples.
// Check the length with:
//
//	len(mockedSegment.SamplesCalls())
func (mock *SegmentMock) SamplesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSamples.RLock()
	calls = mock.calls.Samples
	mock.lockSamples.RUnlock()
	return calls
}

// Series calls SeriesFunc.
func (mock *SegmentMock) Series() uint32 {
	if mock.SeriesFunc == nil {
		panic("SegmentMock.SeriesFunc: method is nil but Segment.Series was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSeries.Lock()
	mock.calls.Series = append(mock.calls.Series, callInfo)
	mock.lockSeries.Unlock()
	return mock.SeriesFunc()
}

// SeriesCalls gets all the calls that were made to Series.
// Check the length with:
//
//	len(mockedSegment.SeriesCalls())
func (mock *SegmentMock) SeriesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSeries.RLock()
	calls = mock.calls.Series
	mock.lockSeries.RUnlock()
	return calls
}
