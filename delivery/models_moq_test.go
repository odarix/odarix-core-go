// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package delivery_test

import (
	"github.com/odarix/odarix-core-go/common"
	"io"
	"sync"
)

// Ensure, that SegmentMock does implement common.Segment.
// If this is not the case, regenerate this file with moq.
var _ common.Segment = &SegmentMock{}

// SegmentMock is a mock implementation of common.Segment.
//
//	func TestSomethingThatUsesSegment(t *testing.T) {
//
//		// make and configure a mocked common.Segment
//		mockedSegment := &SegmentMock{
//			EarliestFunc: func() int64 {
//				panic("mock out the Earliest method")
//			},
//			LatestFunc: func() int64 {
//				panic("mock out the Latest method")
//			},
//			SamplesFunc: func() uint32 {
//				panic("mock out the Samples method")
//			},
//			SeriesFunc: func() uint32 {
//				panic("mock out the Series method")
//			},
//			SizeFunc: func() int64 {
//				panic("mock out the Size method")
//			},
//			WriteToFunc: func(w io.Writer) (int64, error) {
//				panic("mock out the WriteTo method")
//			},
//		}
//
//		// use mockedSegment in code that requires common.Segment
//		// and then make assertions.
//
//	}
type SegmentMock struct {
	// EarliestFunc mocks the Earliest method.
	EarliestFunc func() int64

	// LatestFunc mocks the Latest method.
	LatestFunc func() int64

	// SamplesFunc mocks the Samples method.
	SamplesFunc func() uint32

	// SeriesFunc mocks the Series method.
	SeriesFunc func() uint32

	// SizeFunc mocks the Size method.
	SizeFunc func() int64

	// WriteToFunc mocks the WriteTo method.
	WriteToFunc func(w io.Writer) (int64, error)

	// calls tracks calls to the methods.
	calls struct {
		// Earliest holds details about calls to the Earliest method.
		Earliest []struct {
		}
		// Latest holds details about calls to the Latest method.
		Latest []struct {
		}
		// Samples holds details about calls to the Samples method.
		Samples []struct {
		}
		// Series holds details about calls to the Series method.
		Series []struct {
		}
		// Size holds details about calls to the Size method.
		Size []struct {
		}
		// WriteTo holds details about calls to the WriteTo method.
		WriteTo []struct {
			// W is the w argument value.
			W io.Writer
		}
	}
	lockEarliest sync.RWMutex
	lockLatest   sync.RWMutex
	lockSamples  sync.RWMutex
	lockSeries   sync.RWMutex
	lockSize     sync.RWMutex
	lockWriteTo  sync.RWMutex
}

// Earliest calls EarliestFunc.
func (mock *SegmentMock) Earliest() int64 {
	if mock.EarliestFunc == nil {
		panic("SegmentMock.EarliestFunc: method is nil but Segment.Earliest was just called")
	}
	callInfo := struct {
	}{}
	mock.lockEarliest.Lock()
	mock.calls.Earliest = append(mock.calls.Earliest, callInfo)
	mock.lockEarliest.Unlock()
	return mock.EarliestFunc()
}

// EarliestCalls gets all the calls that were made to Earliest.
// Check the length with:
//
//	len(mockedSegment.EarliestCalls())
func (mock *SegmentMock) EarliestCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockEarliest.RLock()
	calls = mock.calls.Earliest
	mock.lockEarliest.RUnlock()
	return calls
}

// Latest calls LatestFunc.
func (mock *SegmentMock) Latest() int64 {
	if mock.LatestFunc == nil {
		panic("SegmentMock.LatestFunc: method is nil but Segment.Latest was just called")
	}
	callInfo := struct {
	}{}
	mock.lockLatest.Lock()
	mock.calls.Latest = append(mock.calls.Latest, callInfo)
	mock.lockLatest.Unlock()
	return mock.LatestFunc()
}

// LatestCalls gets all the calls that were made to Latest.
// Check the length with:
//
//	len(mockedSegment.LatestCalls())
func (mock *SegmentMock) LatestCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockLatest.RLock()
	calls = mock.calls.Latest
	mock.lockLatest.RUnlock()
	return calls
}

// Samples calls SamplesFunc.
func (mock *SegmentMock) Samples() uint32 {
	if mock.SamplesFunc == nil {
		panic("SegmentMock.SamplesFunc: method is nil but Segment.Samples was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSamples.Lock()
	mock.calls.Samples = append(mock.calls.Samples, callInfo)
	mock.lockSamples.Unlock()
	return mock.SamplesFunc()
}

// SamplesCalls gets all the calls that were made to Samples.
// Check the length with:
//
//	len(mockedSegment.SamplesCalls())
func (mock *SegmentMock) SamplesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSamples.RLock()
	calls = mock.calls.Samples
	mock.lockSamples.RUnlock()
	return calls
}

// Series calls SeriesFunc.
func (mock *SegmentMock) Series() uint32 {
	if mock.SeriesFunc == nil {
		panic("SegmentMock.SeriesFunc: method is nil but Segment.Series was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSeries.Lock()
	mock.calls.Series = append(mock.calls.Series, callInfo)
	mock.lockSeries.Unlock()
	return mock.SeriesFunc()
}

// SeriesCalls gets all the calls that were made to Series.
// Check the length with:
//
//	len(mockedSegment.SeriesCalls())
func (mock *SegmentMock) SeriesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSeries.RLock()
	calls = mock.calls.Series
	mock.lockSeries.RUnlock()
	return calls
}

// Size calls SizeFunc.
func (mock *SegmentMock) Size() int64 {
	if mock.SizeFunc == nil {
		panic("SegmentMock.SizeFunc: method is nil but Segment.Size was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSize.Lock()
	mock.calls.Size = append(mock.calls.Size, callInfo)
	mock.lockSize.Unlock()
	return mock.SizeFunc()
}

// SizeCalls gets all the calls that were made to Size.
// Check the length with:
//
//	len(mockedSegment.SizeCalls())
func (mock *SegmentMock) SizeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSize.RLock()
	calls = mock.calls.Size
	mock.lockSize.RUnlock()
	return calls
}

// WriteTo calls WriteToFunc.
func (mock *SegmentMock) WriteTo(w io.Writer) (int64, error) {
	if mock.WriteToFunc == nil {
		panic("SegmentMock.WriteToFunc: method is nil but Segment.WriteTo was just called")
	}
	callInfo := struct {
		W io.Writer
	}{
		W: w,
	}
	mock.lockWriteTo.Lock()
	mock.calls.WriteTo = append(mock.calls.WriteTo, callInfo)
	mock.lockWriteTo.Unlock()
	return mock.WriteToFunc(w)
}

// WriteToCalls gets all the calls that were made to WriteTo.
// Check the length with:
//
//	len(mockedSegment.WriteToCalls())
func (mock *SegmentMock) WriteToCalls() []struct {
	W io.Writer
} {
	var calls []struct {
		W io.Writer
	}
	mock.lockWriteTo.RLock()
	calls = mock.calls.WriteTo
	mock.lockWriteTo.RUnlock()
	return calls
}
