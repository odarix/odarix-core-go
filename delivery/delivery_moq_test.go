// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package delivery_test

import (
	"context"
	"github.com/odarix/odarix-core-go/delivery"
	"sync"
)

// Ensure, that ManagerRefillSenderMock does implement delivery.ManagerRefillSender.
// If this is not the case, regenerate this file with moq.
var _ delivery.ManagerRefillSender = &ManagerRefillSenderMock{}

// ManagerRefillSenderMock is a mock implementation of delivery.ManagerRefillSender.
//
//	func TestSomethingThatUsesManagerRefillSender(t *testing.T) {
//
//		// make and configure a mocked delivery.ManagerRefillSender
//		mockedManagerRefillSender := &ManagerRefillSenderMock{
//			RunFunc: func(contextMoqParam context.Context)  {
//				panic("mock out the Run method")
//			},
//			ShutdownFunc: func(ctx context.Context) error {
//				panic("mock out the Shutdown method")
//			},
//		}
//
//		// use mockedManagerRefillSender in code that requires delivery.ManagerRefillSender
//		// and then make assertions.
//
//	}
type ManagerRefillSenderMock struct {
	// RunFunc mocks the Run method.
	RunFunc func(contextMoqParam context.Context)

	// ShutdownFunc mocks the Shutdown method.
	ShutdownFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Run holds details about calls to the Run method.
		Run []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// Shutdown holds details about calls to the Shutdown method.
		Shutdown []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockRun      sync.RWMutex
	lockShutdown sync.RWMutex
}

// Run calls RunFunc.
func (mock *ManagerRefillSenderMock) Run(contextMoqParam context.Context) {
	if mock.RunFunc == nil {
		panic("ManagerRefillSenderMock.RunFunc: method is nil but ManagerRefillSender.Run was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	mock.RunFunc(contextMoqParam)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//
//	len(mockedManagerRefillSender.RunCalls())
func (mock *ManagerRefillSenderMock) RunCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}

// Shutdown calls ShutdownFunc.
func (mock *ManagerRefillSenderMock) Shutdown(ctx context.Context) error {
	if mock.ShutdownFunc == nil {
		panic("ManagerRefillSenderMock.ShutdownFunc: method is nil but ManagerRefillSender.Shutdown was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockShutdown.Lock()
	mock.calls.Shutdown = append(mock.calls.Shutdown, callInfo)
	mock.lockShutdown.Unlock()
	return mock.ShutdownFunc(ctx)
}

// ShutdownCalls gets all the calls that were made to Shutdown.
// Check the length with:
//
//	len(mockedManagerRefillSender.ShutdownCalls())
func (mock *ManagerRefillSenderMock) ShutdownCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockShutdown.RLock()
	calls = mock.calls.Shutdown
	mock.lockShutdown.RUnlock()
	return calls
}
