// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package e2e_test

import (
	"context"
	"github.com/odarix/odarix-core-go/delivery"
	"net"
	"sync"
)

// Ensure, that ConnDialerMock does implement delivery.ConnDialer.
// If this is not the case, regenerate this file with moq.
var _ delivery.ConnDialer = &ConnDialerMock{}

// ConnDialerMock is a mock implementation of delivery.ConnDialer.
//
//	func TestSomethingThatUsesConnDialer(t *testing.T) {
//
//		// make and configure a mocked delivery.ConnDialer
//		mockedConnDialer := &ConnDialerMock{
//			DialFunc: func(ctx context.Context) (net.Conn, error) {
//				panic("mock out the Dial method")
//			},
//			StringFunc: func() string {
//				panic("mock out the String method")
//			},
//		}
//
//		// use mockedConnDialer in code that requires delivery.ConnDialer
//		// and then make assertions.
//
//	}
type ConnDialerMock struct {
	// DialFunc mocks the Dial method.
	DialFunc func(ctx context.Context) (net.Conn, error)

	// StringFunc mocks the String method.
	StringFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// Dial holds details about calls to the Dial method.
		Dial []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// String holds details about calls to the String method.
		String []struct {
		}
	}
	lockDial   sync.RWMutex
	lockString sync.RWMutex
}

// Dial calls DialFunc.
func (mock *ConnDialerMock) Dial(ctx context.Context) (net.Conn, error) {
	if mock.DialFunc == nil {
		panic("ConnDialerMock.DialFunc: method is nil but ConnDialer.Dial was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockDial.Lock()
	mock.calls.Dial = append(mock.calls.Dial, callInfo)
	mock.lockDial.Unlock()
	return mock.DialFunc(ctx)
}

// DialCalls gets all the calls that were made to Dial.
// Check the length with:
//
//	len(mockedConnDialer.DialCalls())
func (mock *ConnDialerMock) DialCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockDial.RLock()
	calls = mock.calls.Dial
	mock.lockDial.RUnlock()
	return calls
}

// String calls StringFunc.
func (mock *ConnDialerMock) String() string {
	if mock.StringFunc == nil {
		panic("ConnDialerMock.StringFunc: method is nil but ConnDialer.String was just called")
	}
	callInfo := struct {
	}{}
	mock.lockString.Lock()
	mock.calls.String = append(mock.calls.String, callInfo)
	mock.lockString.Unlock()
	return mock.StringFunc()
}

// StringCalls gets all the calls that were made to String.
// Check the length with:
//
//	len(mockedConnDialer.StringCalls())
func (mock *ConnDialerMock) StringCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockString.RLock()
	calls = mock.calls.String
	mock.lockString.RUnlock()
	return calls
}
